// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
	//to create a 16-bit zero
	Not16(in=x,out=notx);
	And16(a=x,b=notx,out=zero16);
	//to create 16-bit one
	Or16(a=x,b=notx,out=one16);
	//to create 1-bit zero
	Not(in=x[0],out=notx1);
	And(a=x[0],b=notx1,out=zero1);
	//to create 1-bit one
    Or(a=x[0],b=notx1,out=one1); 
	//zx_x7 will behave as the new x_think of it as a black box. we don't care what is actually returned
	Mux16(a=x,b=zero16,sel=zx,out=x7);
	//nx_x8 will be the new x
	Not16(in=x7,out=notx7);
	Mux16(a=x7,b=notx7,sel=nx,out=x8);
	//zy
	Mux16(a=y,b=zero16,sel=zy,out=y7);
	//ny
	Not16(in=y7,out=noty7);
	Mux16(a=y7,b=noty7,sel=ny,out=y8);
	//f and output f8 as out
	Add16(a=x8,b=y8,out=sum8);
	And16(a=x8,b=y8,out=and1);
	Mux16(a=and1,b=sum8,sel=f,out=f8);
	//no_no8 will be the new output
	Not16(in=f8,out=notf8);
	Mux16(a=f8,b=notf8,sel=no,out=out,out[0..7]=b1,out[8..15]=b2,out[15]=m);
	//zr
	Or8Way(in=b1,out=z1);
    Or8Way(in=b2,out=z2);
	Or(a=z1,b=z2,out=z3);
	Mux(a=one1,b=zero1,sel=z3,out=zr);
	//ng
	Mux(a=zero1,b=one1,sel=m,out=ng);
}